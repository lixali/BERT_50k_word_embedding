{
 "id": "220672",
 "text": "The command in the Unix family of computer operating systems is a utility that is used to compare two files for common and distinct lines. is specified in the POSIX standard. It has been widely available on Unix-like operating systems since the mid to late 1980s. ==History== Written by Lee E. McMahon, first appeared in Version 4 Unix. The version of bundled in GNU coreutils was written by Richard Stallman and David MacKenzie. ==Usage== reads two files as input, regarded as lines of text. outputs one file, which contains three columns. The first two columns contain lines unique to the first and second file, respectively. The last column contains lines common to both. This functionally is similar to . Columns are typically distinguished with the character. If the input files contain lines beginning with the separator character, the output columns can become ambiguous. For efficiency, standard implementations of expect both input files to be sequenced in the same line collation order, sorted lexically. The sort (Unix) command can be used for this purpose. The algorithm makes use of the collating sequence of the current locale. If the lines in the files are not both collated in accordance with the current locale, the result is undefined. ==Return code== Unlike , the return code from has no logical significance concerning the relationship of the two files. A return code of 0 indicates success, a return code >0 indicates an error occurred during processing. ==Example== $ cat foo apple banana eggplant $ cat bar apple banana banana zucchini $ comm foo bar apple banana banana eggplant zucchini This shows that both files have one banana, but only bar has a second banana. In more detail, the output file has the appearance that follows. Note that the column is interpreted by the number of leading tab characters. \\t represents a tab character and represents a newline (Escape character#Programming and data formats). {|class=\"wikitable\" style=\"text- align:center\" ! !! width=20 | 0 !! width=20 | 1 !! width=20 | 2 !! width=20 | 3 !! width=20 | 4 !! width=20 | 5 !! width=20 | 6 !! width=20 | 7 !! width=20 | 8 !! width=20 | 9 |- ! 0 | \\t || \\t || a || p || p || l || e || |- ! 1 | \\t || \\t || b || a || n || a || n || a || |- ! 2 | \\t || b || a || n || a || n || a || |- ! 3 | e || g || g || p || l || a || n || t || |- ! 4 | \\t || z || u || c || c || h || i || n || i || |} ==Comparison to diff== In general terms, is a more powerful utility than . The simpler is best suited for use in scripts. The primary distinction between and is that discards information about the order of the lines prior to sorting. A minor difference between and is that will not try to indicate that a line has \"changed\" between the two files; lines are either shown in the \"from file #1\", \"from file #2\", or \"in both\" columns. This can be useful if one wishes two lines to be considered different even if they only have subtle differences. ==Other options== has command-line options to suppress any of the three columns. This is useful for scripting. There is also an option to read one file (but not both) from standard input. ==Limits== Up to a full line must be buffered from each input file during line comparison, before the next output line is written. Some implementations read lines with the function which does not impose any line length limits if system memory suffices. Other implementations read lines with the function . This function requires a fixed buffer. For these implementations, the buffer is often sized according to the POSIX macro . ==See also== * Comparison of file comparison tools * List of Unix commands * cmp (Unix) – character oriented file comparison * cut (Unix) – splitting column-oriented files ==References== ==External links== * * * Category:Free file comparison tools Comm Category:Unix SUS2008 utilities Category:Plan 9 commands Category:Inferno (operating system) commands",
 "title": "Comm"
}