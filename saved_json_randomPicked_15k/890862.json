{
 "id": "890862",
 "text": "L-attributed grammars are a special type of attribute grammars. They allow the attributes to be evaluated in one depth-first left-to-right traversal of the abstract syntax tree. As a result, attribute evaluation in L-attributed grammars can be incorporated conveniently in top-down parsing. A syntax- directed definition is L-attributed if each inherited attribute of X_j on the right side of A \\rightarrow X_1, X_2, \\dots, X_n depends only on # the attributes of the symbols X_1, X_2, \\dots, X_{j-1} # the inherited attributes of A (but not its synthesized attributes) Every S-attributed syntax-directed definition is also L-attributed. Implementing L-attributed definitions in Bottom-Up parsers requires rewriting L-attributed definitions into translation schemes. Many programming languages are L-attributed. Special types of compilers, the narrow compilers, are based on some form of L-attributed grammar. These are a strict superset of S-attributed grammars. Used for code synthesis. Either \"inherited attributes\" or \"synthesized attributes\" associated with the occurrence of symbol X_1,X_2, \\dots, X_n. == References == Category:Formal languages Category:Compiler construction",
 "title": "L-attributed grammar"
}