{
 "id": "422564",
 "text": "Jakarta Server Faces (JSF; formerly JavaServer Faces) is a Java specification for building component-based user interfaces for web applicationsJavaServer Faces Technology and was formalized as a standard through the Java Community Process being part of the Java Platform, Enterprise Edition. It is also an MVC web framework that simplifies construction of user interfaces (UI) for server- based applications by using reusable UI components in a page. JSF 2.x uses Facelets as its default templating system. Users of the software may also choose to employ technologies such as XUL, or Java.NoVDL: Write your JSF views in pure Java JSF 1.x uses JavaServer Pages (JSP) as its default templating system. ==History== In 2001, the original Java Specification Request (JSR) for the technology that ultimately became JavaServer Faces proposed developing a package with the name `javax.servlet.ui` In June 2001, JavaWorld would report on Amy Fowler's team's design of \"the JavaServer Faces API\" (also known as \"Moonwalk\") as \"an application framework for creating Web-based user interfaces\". ===Latest developments=== Facelets (which was designed specifically for Java Server Faces) was adopted as the official view technology for JSF 2.0. This eliminates the life-cycle conflicts that existed with JSP, forcing workarounds by Java developers. The new JSF developments also provide wide accessibility to Java annotations such as `@ManagedBean`, `@ManagedProperty` and `@FacesComponent` that removes the need for `faces- config.xml,` in all cases except framework extension. Navigation is also simplified, removing the need for `faces-config.xml` navigation cases. Page transitions can be invoked simply by passing the name of the desired View or Facelet. The addition of Partial State Saving and Document Object Model (DOM) updates are part of the built-in standardized AJAX support. The latest JSF release has built-in support for handling resources like images, CSS and Javascript, allowing artifacts to be included with component libraries, separated into JAR files, or simply co-located into a consistent place within the Web application. This includes logical naming and versioning of resources. JSF 2.0 also includes a number of other changes like adding support for events, separate development, staging, and production modes, similar to `RAILS_ENV` in Ruby on Rails, and significantly expanding the standard set of components. ===Update history=== * JSF 2.3 (2017-03-28) – Major features: search Expressions, extensionless URLs, bean validation for complete classes, push communication using WebSocket, enhanced integration with CDI. * JSF 2.2 (2013-05-21) – Introduced new concepts like stateless views, page flow and the ability to create portable resource contracts.JSF 2.2 (JSR-344) is final |techscouting through the java news. Blog.oio.de. Retrieved on 2020-07-27. * JSF 2.1 (2010-11-22) – Maintenance release 2 of JSF 2.0. Only a very minor number of specification changes.JSR 314 JavaServer Faces 2.1 JSF 2.1 |techscouting through the java news. Blog.oio.de. Retrieved on 2020-07-27. * JSF 2.0 (2009-07-01) – Major release for ease of use, enhanced functionality, and performance. Coincides with Java EE 6. * JSF 1.2 (2006-05-11) – Many improvements to core systems and APIs. Coincides with Java EE 5. Initial adoption into Java EE. * JSF 1.1 (2004-05-27) – Bug-fix release. No specification changes. * JSF 1.0 (2004-03-11) – Initial specification released. ==How it works== Based on a component-driven UI design-model, JavaServer Faces uses XML files called view templates or Facelets views. The `FacesServlet` processes requests, loads the appropriate view template, builds a component tree, processes events, and renders the response (typically in the HTML language) to the client. The state of UI components and other objects of scope interest is saved at the end of each request in a process called stateSaving (note: transient true), and restored upon next creation of that view. Either the client or the server side can save objects and states. ===JSF and AJAX=== JSF is often used together with AJAX, a Rich Internet application development technique. AJAX is a combination of web development techniques and technologies that make it possible to create rich user interfaces. The user interface components in Mojarra (the JSF reference implementation) and Apache MyFaces were originally developed for HTML only, and AJAX had to be added via JavaScript. This has changed, however: Because JSF supports multiple output formats, AJAX-enabled components can easily be added to improve user interfaces created with JSF. The JSF 2.0 specification provides built-in support for AJAX by standardizing the AJAX request lifecycle and providing simple development interfaces to AJAX events. The specification allows an event triggered by the client to go through validation, conversion, and method invocation, before returning the result to the browser via an XML DOM update. JSF 2 includes support for graceful degradation when JavaScript is disabled in the browser. ==AJAX-enabled components and frameworks== The following companies and projects offer AJAX-based JSF frameworks or component libraries: * Apache MyFaces – The Apache Foundation JSF implementation with AJAX components * Backbase Enterprise AJAX – JSF Edition – AJAX framework * BootsFaces Open source JSF Framework based on Bootstrap * IBM Notes – XPages * ICEfaces – open-source, Java JSF extension framework and rich components, AJAX without JavaScript * JBoss RichFaces (derived from and replaces AJAX4jsf) – AJAX-enabled JSF components for layout, file upload, forms, inputs and many other features. It reached its end-of-life in June 2016. * OmniFaces – open- source JSF utility library * OpenFaces – AJAX framework with JSF components * Oracle ADF Faces Rich Client – Oracle Application Development Framework * PrimeFaces – AJAX framework with JSF components * Sun Java BluePrints AJAX components * ZK – AJAX framework with JSF components ==Criticisms== === ThoughtWorks, 2014 === In their January 2014 Technology Radar publication, ThoughtWorks wrote: ==== Rebuttal ==== In February 2014, Çağatay Çivici (PrimeFaces Lead) responded to ThoughtWorks criticisms in a post titled JSF is not what you've been told anymore. Çivici argues that improvements in JSF over the years offer many features that embrace modern web development, providing the option to write your own JavaScript, HTML, and CSS. Also regarding state, Çağatay wrote: === DZone, 2014 === In the article published November 2014 in the DZone website, titled \"Why You Should Avoid JSF\", Jens Schauder wrote: === TheServerSide, 2016 === In February 2016, the enterprise Java community website TheServerSide published an article recommending against the use of JSF, whose use could compromise the quality of the final product. The article ellaborated on five reasons: # Simple tasks become difficult; # JSF lacks flexibility; # The learning curve is steep; # Incompatibility with standard Java technologies; and # Primitive AJAX support. == References == ==External links== * Category:Java enterprise platform Category:Java specification requests",
 "title": "Jakarta Server Faces"
}