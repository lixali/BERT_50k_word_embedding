{
 "id": "756593",
 "text": "Windows Console is the infrastructure for console applications in Microsoft Windows. An instance of a Windows Console has a screen buffer and an input buffer. It allows console apps to run inside a window or in hardware text mode (so as to occupy the entire screen). The user can switch between the two using the key combination. The text mode is unavailable in Windows Vista and later. Starting with Windows 10, however, a native full-screen mode is available. Windows Console instances are typically used for apps that do not need to display images but might use color. Examples include cmd.exe, Windows PowerShell, Far Manager, and Midnight Commander. In 2019, the Windows Console infrastructure was open-sourced under the MIT License, alongside Windows Terminal. ==Window and full screen modes== In Windows, a console application may run in two modes. One mode places the text in a window and uses an operating system's font rendering. In this mode, an application's interaction with user is controlled by the windowing system. This is analogous to X Window System applications such as xterm. The second is the full-screen mode. In Windows XP and earlier, the full-screen console uses a hardware text mode and uploads a raster font to the video adapter. This is analogous to a text system console. This early full-screen mode only supports VGA-compatible text modes, giving it a maximum character resolution of 80 columns by 28 rows. This mode was deprecated in Windows Vista. It was possible to circumvent this issue by installing a Windows XP display driver; however, Windows 8 and later do not accept them. Windows 10 features a full-screen mode once again, but this implementation uses the native Windows rendering subsystem, instead of the text mode. It can have as many columns and rows as fits on the screen. Apps can be made to switch between the two modes using the key combination. ==Details== The input buffer is a queue where events are stored (from keyboard, mouse etc.). The output buffer is a rectangular grid where characters are stored, together with their attributes. A console window may have several output buffers, only one of which is active (i.e. displayed) for a given moment. Apps may programmatically interact with Windows Console through Windows API, which exposes both high-level functions (such as `ReadConsole` and `WriteConsole`) and low-level functions (e.g. `ReadConsoleInput` and `WriteConsoleOutput`). Users can change the color palette or font, either on the system-wide level or app-level. Each instance of a console app themselves, however, cannot change its color palette or font on the fly. Windows Console apps are distinct from MS-DOS apps, even though on Windows (especially on Windows 9x), they may not look different. Windows Console apps have access to entire Windows API and do not run on MS-DOS or compatible operating systems. DOS apps, however, cannot access Windows API and may only run on 32-bit versions of Windows with the aid of Virtual DOS machine (VDM). ==Implementations== Prior to Windows 95, there is no native support for consoles. Because Windows 3.1 and earlier are merely a graphical interface for MS-DOS, most text programs that ran on earlier Windows versions were actually MS-DOS programs running in a window. To simplify the task of porting applications to Windows, early versions of Visual C++ are supplied with QuickWin, a library that implements basic console functionality inside a regular window. A similar library for Borland C++ was called EasyWin. ===Windows 9x=== Windows 9x support is relatively poor compared to Windows NT, because the console window runs in the system virtual DOS machine and so keyboard input to a Win32 console application had to be directed to it by conagent.exe running in a DOS VM that are also used for real DOS applications by hooking the keyboard interrupt. `conagent.exe` then calls Vcond (which is a VxD). Vcond then had to pass the keyboard input to the System VM, and then finally to the Win32 console application. Besides performance, another problem with this implementation is that drives that are local to a DOS VM are not visible to a Win32 console application. This can cause confusion. Under Windows 9x, the screen buffer mirrors the structure of VGA text buffer, with two bytes per character cell: one byte for character code, one byte for attributes (the character must be in OEM character set, the attribute is with high-intensity background/no blinking). This speeds up operation considerably if the actual VGA text mode is used. ===Windows NT and Windows CE=== Traditionally, the Client/Server Runtime Subsystem (CSRSS) has been responsible for managing console windows on the Windows NT family of operating systems.Microsoft Security Advisory (930181): Exploit Code Published Affecting Windows Client Server Run-Time Subsystem In Windows 7, CSRSS spawns one `conhost.exe` for each console window, to manage it. In Windows 8 and later, the console apps spawn their `conhost.exe` processes directly. This change has both security and usability implications. While CSRSS runs in a highly privileged security context, each `conhost.exe` runs in the same security context as the console app. In addition, in Windows 7, this change enabled console windows to have the features of the Aero Glass theme. On Windows NT and Windows CE, the screen buffer uses four bytes per character cell: two bytes for character code, two bytes for attributes. The character is then encoded in a 16-bit subset of Unicode (UCS-2). For backward compatibility, the console APIs exist in two versions: Unicode and non-Unicode. The non-Unicode versions of APIs can use code page switching to extend the range of displayed characters (but only if TrueType fonts are used for the console window, thereby extending the range of codes available). Even UTF-8 is available as \"code page 65001\" (displaying only from the UCS-2 subset of full Unicode). As of the Windows 10 October 2018 update, the Windows Console has full Unicode support. ==See also== * Comparison of terminal emulators * Command-line interface * Shell (computing) * System console * Windows Terminal * Linux console * Text-based (computing) * List of formerly proprietary software ==References== ==External links== *Windows Console documentation *Windows Command-Line: Backgrounder blog Category:Formerly proprietary software Category:Free and open-source software Category:Free terminal emulators Category:Microsoft free software Category:Software using the MIT license Category:Text user interface Category:Windows administration",
 "title": "Windows Console"
}