{
 "id": "220044",
 "text": "In computer science, multiple granularity locking (MGL) is a locking method used in database management systems (DBMS) and relational databases. In multiple granularity locking, locks are set on objects that contain other objects. MGL exploits the hierarchical nature of the contains relationship. For example, a database may have files, which contain pages, which contain records. This can be thought of as a tree of objects, where each node contains its children. A lock on this structure (such as a shared or exclusive lock) locks the targeted node as well as all of its descendants. Multiple granularity locking is usually used with non-strict two-phase locking to guarantee serializability. ==Lock modes== In addition to shared (S) locks and exclusive (X) locks from other locking schemes, like strict two-phase locking, MGL also uses intentional \"locks\", which do not directly lock a node, but instead denote the existence, or intent to add, a lock of the specified type lower in the node hierarchy. Intentional locks include \"intention shared\" (IS), \"intention exclusive\" (IX), and the combined \"shared and intention exclusive\" (SIX) locks. IS locks conflict with X locks, while IX locks conflict with S and X locks. The null lock (NL) is compatible with everything. To lock a node in S (or X), MGL has the transaction lock on all of its ancestors with IS (or IX), so if a transaction locks a node in S (or X), no other transaction can access its ancestors in X (or S and X). This protocol is shown in the following table: {| class=\"wikitable\" | To Get || Must have on all ancestors |- | IS or S || IS or IX |- | IX, SIX or X || IX or SIX |} Determining what level of granularity to use for locking is done by locking the finest level possible (i.e., at the lowest leaf), and then escalating these locks to higher levels in the file hierarchy to cover more records or file elements as needed in a process known as \"lock escalation\". MGL locking modes are compatible with each other as defined in the following matrix. {| class=\"wikitable\" |- ! Mode || NL || IS || IX || S || SIX || X |- ! NL | || || || || || |- ! IS | || || || || || |- ! IX | || || || || || |- ! S | || || || || || |- ! SIX | || || || || || |- ! X | || || || || || |} Following the locking protocol and the compatibility matrix, if one transaction holds a node in S mode, no other transactions can have locked any ancestor in X mode. ==See also== * Atomicity (programming) * Concurrency control * Lock (computer science) ==References== Category:Concurrency control",
 "title": "Multiple granularity locking"
}