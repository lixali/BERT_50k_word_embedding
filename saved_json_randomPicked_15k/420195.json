{
 "id": "420195",
 "text": "In computing, the DOS Protected Mode Interface (DPMI) is a specification introduced in 1989 which allows a DOS program to run in protected mode, giving access to many features of the new PC processors of the time not available in real mode. It was initially developed by Microsoft for Windows 3.0, although Microsoft later turned control of the specification over to an industry committee with open membership. Almost all modern DOS extenders are based on DPMI and allow DOS programs to address all memory available in the PC and to run in protected mode (mostly in ring 3, least privileged). == Overview == DPMI stands for DOS Protected Mode Interface. It is an API that allows a program to run in protected mode on 80286 series and later processors, and do the calls to real mode without having to set up these CPU modes manually. DPMI also provides the functions for managing various resources, notably memory. This allows the DPMI-enabled programs to work in multi-tasking OSes, allowing an OS kernel to distribute such resources between multiple applications. DPMI provides only the functionality that needs to be implemented in supervisor mode. It can be thought of as a single-tasking microkernel. The rest of the functionality is available to DPMI-enabled programs via the calls to real-mode DOS and BIOS services, allowing the DPMI API itself to remain mostly independent of DOS. Things that make DPMI API DOS-specific, are just 3 functions for managing DOS memory, and the letter \"D\" in the \"DPMI\" acronym. A DPMI service can be 16-bit, 32-bit, or \"universal\" and is called the DPMI kernel, DPMI host, or DPMI server. It is provided either by the host operating system (virtual DPMI host) or by a DOS extender (real DPMI host). The DPMI kernel can be a part of a DOS extender such as in DOS/4GW or DOS/32A, or separate, like CWSDPMI or HDPMI. The primary use of DPMI API is to allow DOS extenders to provide the host-OS-agnostic environment. DOS extender checks the presence of a DPMI kernel, and installs its own only if the one was not installed already. This allows DOS-extended programs to run either in a multitasking OS that provides its own DPMI kernel, or directly under bare- metal DOS, in which case DOS extender uses its own DPMI kernel. Windows 3.x and 9x's user-mode kernels are built with a DOS extender, so they fully rely on a DPMI API that is provided by windows's ring-0 kernel. == History == The first DPMI specification drafts were published in 1989 by Microsoft's Ralph Lipe. While based on a prototypical version of DPMI for Windows 3.0 in 386 enhanced mode, several features of this implementation were removed from the official specification, including a feature named MS-DOS Extensions or DOS API translation that had been proposed by Ralph Lipe in the original drafts. Most of it was implementing DOS and BIOS interfaces (due to this history some INT 21h APIs like 4Ch have to be implemented by all DPMI implementations). DPMI version 0.9 was published in 1990 by the newly formed DPMI Committee. The version number 0.9 of the resulting specification was chosen to reflect the stripped-down nature and incomplete status of the standard the members of the DPMI Committee could agree upon. While Windows reports DPMI version 0.9 for compatibility, it actually implements the other parts as well, since they present a vital part of the system. This undocumented full nature of DPMI has become known as \"true DPMI\" in the industry. The DPMI standard was not the only effort to overcome the shortcomings of the VCPI specification. At the same time that Microsoft developed DPMI for Windows 3.0, another industry alliance including Intel's Software Focus Group, Lotus, Digital Research, Interactive Systems and others developed a specification named Extended VCPI (XVCPI) to make the memory management and multitasking capabilities of the 386 available for extended DOS applications. When it turned out that Microsoft's DPMI proposal addressed a number of similar issues and was supported by Windows, these efforts led to the creation of the DPMI Committee in February 1990 during a meeting at Intel in Santa Clara. In 1991, the DPMI Committee revised DPMI to version 1.0 in order to incorporate a number of clarifications and extensions, but it still did not include the missing \"true DPMI\" bits implemented in Windows. In fact, \"true DPMI\" never became part of the official DPMI specification, and Windows likewise never implemented the DPMI 1.0 extensions (and not many DPMI hosts did). While DPMI is tailored to run extended DOS application software in protected mode and extended memory, it is not particularly well suited for resident system extensions. Another specification named DPMS, developed by Digital Research / Novell around 1992, specifically addresses requirements to easily relocate modified DOS driver software into extended memory and run them in protected mode, thereby reducing their conventional memory footprint down to small stubs. This is also supported by Helix Cloaking. The DPMI \"method\" is specific to DOS and the IBM PC. Other computer types were upgraded from 16-bit to 32-bit, and the advanced program support was provided by upgrading the operating system with a new 32-bit API and new memory management/addressing capabilities. For example, the OS/2 core system supports 32-bit programs, and can be run without the GUI. The DPMI solution appears to be mainly needed to address third party need to get DOS protected mode programs running stably on Windows 3.x before the dominant operating system vendor, Microsoft, could or would address the future of 32-bit Windows. In addition, Microsoft didn't see the answer to the 32-bit transition as a 32-bit DOS, but rather a 32-bit Windows with a completely different (and incompatible) API. === Compatibility === While Windows 3.0 implements \"true DPMI\" and reports support for DPMI 0.9, DPMI version 1.0 was never implemented in Microsoft Windows, so most programs and DOS extenders were mostly only written for version 0.9. Few extenders, however, implement \"true DPMI\". Beta versions of Qualitas 386MAX implemented \"true DPMI\" and could run Windows' KRNL386.EXE from the command line, but it was claimed that was disabled in the released product in an internal email. However, DPMIONE (by Bob Smith based on the 386MAX code) can do it. Currently DPMIONE and 386MAX is also the only DPMI host which supports DPMI 1.0 completely (e.g. uncommitted memory) and they are the main supporter of DPMI 1.0. The KRNL386.SYS (aka \"MultiMAX\") of DR DOS \"Panther\" and \"StarTrek\", which has been under development since 1991, and the EMM386.EXE memory managers of Novell DOS 7, Caldera OpenDOS and DR-DOS 7.02 and higher have built-in support for DPMI when loaded with the `/DPMI[=ON]` option. KRNL386.SYS even had a command line option `/VER=0.9|1.0` to provide support for either DPMI 1.0 or 0.9. DOS API translation was referred to as \"called interrupt 21 from protected mode\". Multiuser DOS, System Manager and REAL/32 support DPMI as well. The most famous separate DPMI kernel is probably CWSDPMI; it supports DPMI 0.9, but no undocumented \"DOS API translation\". Another variant called PMODE by \"TRAN\" aka Thomas Pytel was popular with 32-bit programmers during the demo scene of the 1990s. Many games used DOS/4GW, which was developed by Rational Systems as a subset of DOS/4G and was distributed with the Watcom C compiler. HDPMI (part of HX DOS Extender) provides \"DOS API translation\" and almost complete DPMI 1.0 implementation. === DPMI Committee === The DPMI 1.0 Committee met between 1990 through 1991 and consisted of 12 groups: * Borland International (Borland C, Turbo Pascal) * IBM Corporation (PC DOS, OS/2) * AI Architects/Ergo Computer Solutions/Eclipse Computer Solutions/Ergo Computing (OS/286, OS/386 DOS extenders) * Intelligent Graphics Corporation (VM/386 multi-user DOS) * Intel Corporation (286, 386, 486 microprocessors) * Locus Computing Corporation (Merge) * Lotus Development Corporation (Lotus 1-2-3) * Microsoft Corporation (MS-DOS, Microsoft Windows) * Phar Lap Software (DOS|286, DOS|386, TNT) * Phoenix Technologies (Phoenix BIOS, PMate, PForCe, Plink-86) * Quarterdeck Office Systems (QEMM, DESQview, DESQview/X) * Rational Systems/Tenberry Software (DOS/16M, DOS/4G, DOS/4GW DOS extenders) == See also == * Virtual Control Program Interface (VCPI) * DOS Protected Mode Services (DPMS) * Helix Cloaking * NetWare I/O Subsystem (NIOS) * Multiuser DOS Federation == Notes == == References == == Further reading == * (22 pages) * (112 pages) * (160 pages) * * * (MSDPMI on Japanese MS-DOS 5.00A for PC-98 platform.) == External links == * * * * * Category:DOS technology Category:DOS memory management Category:DOS extenders Category:Computer-related introductions in 1989",
 "title": "DOS Protected Mode Interface"
}