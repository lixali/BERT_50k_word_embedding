{
 "id": "188515",
 "text": "ECMAScript () (or ES) is a JavaScript standard meant to ensure the interoperability of web pages across different web browsers. It is standardized by Ecma International according to the document ECMA-262. ECMAScript is commonly used for client-side scripting on the World Wide Web, and it is increasingly being used for writing server applications and services using Node.js. == ECMAScript, ECMA-262 and JavaScript == ECMA-262 or the ECMAScript Language Specification defines the ECMAScript Language, or just ECMAScript (aka JavaScript). ECMA-262 only specifies language syntax and semantics of the core API, such as , , and , while valid implementations of JavaScript add their own functionality like input/output or file system handling. == History== The ECMAScript specification is a standardized specification of a scripting language developed by Brendan Eich of Netscape; initially named Mocha, then LiveScript, and finally JavaScript. In December 1995, Sun Microsystems and Netscape announced JavaScript in a press release. In November 1996, Netscape announced a meeting of the Ecma International standards organization to advance the standardization of JavaScript. The first edition of ECMA-262 was adopted by the Ecma General Assembly in June 1997. Several editions of the language standard have been published since then. The name \"ECMAScript\" was a compromise between the organizations involved in standardizing the language, especially Netscape and Microsoft, whose disputes dominated the early standards sessions. Eich commented that \"ECMAScript was always an unwanted trade name that sounds like a skin disease.\" ECMAScript has been formalized through operational semantics by work at Stanford University and the Department of Computing, Imperial College London for security analysis and standardization. ===Versions=== There are eleven editions of ECMA-262 published. Work on version 12 of the standard was finalized in June 2021. {| class=\"wikitable\" |- style=\"background:#ccf;\" |+ECMAScript version history |- style=\"position:sticky; top:0\" !scope=\"col\"| Edition !scope=\"col\"| Date published !scope=\"col\"| Name !scope=\"col\"| Changes from prior edition !scope=\"col\"| Editor |- !scope=\"row\"| 1 | June 1997 | | First edition | Guy L. Steele Jr. |- !scope=\"row\"| 2 | June 1998 | | Editorial changes to keep the specification fully aligned with ISO/IEC 16262 international standard | Mike Cowlishaw |- !scope=\"row\"| 3 | December 1999 | | Added regular expressions, better string handling, new control statements, try/catch exception handling, tighter definition of errors, formatting for numeric output, and other enhancements | Mike Cowlishaw |- !scope=\"row\"| 4 | Abandoned (last draft 30 June 2003) | | Fourth Edition was abandoned, due to political differences concerning language complexity. Many features proposed for the Fourth Edition have been completely dropped; some were incorporated into the sixth edition. | |- !scope=\"row\"| 5 | December 2009 | | Adds \"strict mode,\" a subset intended to provide more thorough error checking and avoid error-prone constructs. Clarifies many ambiguities in the 3rd edition specification, and accommodates behavior of real-world implementations that differed consistently from that specification. Adds some new features, such as getters and setters, library support for JSON, and more complete reflection on object properties.Archived at Ghostarchive and the Wayback Machine: | Pratap Lakshman, Allen Wirfs-Brock |- !scope=\"row\"| 5.1 | June 2011 | | This edition 5.1 of the ECMAScript standard is fully aligned with the third edition of the international standard ISO/IEC 16262:2011. | Pratap Lakshman, Allen Wirfs-Brock |- !scope=\"row\"| 6 | June 2015 |ECMAScript 2015 (ES2015) | See 6th Edition – ECMAScript 2015 | Allen Wirfs-Brock |- !scope=\"row\"| 7 | June 2016 |ECMAScript 2016 (ES2016) | See 7th Edition – ECMAScript 2016 | Brian Terlson |- !scope=\"row\"| 8 | June 2017 |ECMAScript 2017 (ES2017) | See 8th Edition – ECMAScript 2017 | Brian Terlson |- !scope=\"row\"| 9 | June 2018 |ECMAScript 2018 (ES2018) | See 9th Edition – ECMAScript 2018 | Brian Terlson |- !scope=\"row\"| 10 | June 2019 |ECMAScript 2019 (ES2019) | See 10th Edition – ECMAScript 2019 | Brian Terlson, Bradley Farias, Jordan Harband |- !scope=\"row\"| 11 | June 2020 |ECMAScript 2020 (ES2020) | See 11th Edition – ECMAScript 2020 | Jordan Harband, Kevin Smith |- !scope=\"row\"| 12 | June 2021 |ECMAScript 2021 (ES2021) | See 12th Edition – ECMAScript 2021 | Jordan Harband, Shu-yu Guo, Michael Ficarra, Kevin Gibbons |} In June 2004, Ecma International published ECMA-357 standard, defining an extension to ECMAScript, known as ECMAScript for XML (E4X). Ecma also defined a \"Compact Profile\" for ECMAScript – known as ES-CP, or ECMA 327 – that was designed for resource-constrained devices, which was withdrawn in 2015.2015-03-24 Meeting Notes . ESDiscuss. Also see Ecma withdrawn Standards . ECMA. === 4th Edition (abandoned) === The proposed fourth edition of ECMA-262 (ECMAScript 4 or ES4) would have been the first major update to ECMAScript since the third edition was published in 1999. The specification (along with a reference implementation) was originally targeted for completion by October 2008. The first draft was dated February 1999. An overview of the language was released by the working group on 23 October 2007. By August 2008, the ECMAScript 4th edition proposal had been scaled back into a project code named ECMAScript Harmony. Features under discussion for Harmony at the time included: * classes, * a module system, * optional type annotations and static typing, probably using a structural type system, * generators and iterators, * destructuring assignment, and * algebraic data types. The intent of these features was partly to better support programming in the large, and to allow sacrificing some of the script's ability to be dynamic to improve performance. For example, Tamarin – the virtual machine for ActionScript, developed and open-sourced by Adobe – has just-in-time compilation (JIT) support for certain classes of scripts. In addition to introducing new features, some ES3 bugs were proposed to be fixed in edition 4. These fixes and others, and support for JSON encoding/decoding, have been folded into the ECMAScript, 5th Edition specification. Work started on Edition 4 after the ES-CP (Compact Profile) specification was completed, and continued for approximately 18 months where slow progress was made balancing the theory of Netscape's JavaScript 2 specification with the implementation experience of Microsoft's JScript .NET. After some time, the focus shifted to the ECMAScript for XML (E4X) standard. The update has not been without controversy. In late 2007, a debate between Eich, later the Mozilla Foundation's CTO, and Chris Wilson, Microsoft's platform architect for Internet Explorer, became public on a number of blogs. Wilson cautioned that because the proposed changes to ECMAScript made it backwards incompatible in some respects to earlier versions of the language, the update amounted to \"breaking the Web,\" and that stakeholders who opposed the changes were being \"hidden from view\". Eich responded by stating that Wilson seemed to be \"repeating falsehoods in blogs\" and denied that there was attempt to suppress dissent and challenged critics to give specific examples of incompatibility. He pointed out that Microsoft Silverlight and Adobe AIR rely on C# and ActionScript 3 respectively, both of which are larger and more complex than ECMAScript Edition 3. === 5th Edition === Yahoo, Microsoft, Google, and other 4th edition dissenters formed their own subcommittee to design a less ambitious update of ECMAScript 3, tentatively named ECMAScript 3.1. This edition would focus on security and library updates, with a large emphasis on compatibility. After the aforementioned public sparring, the ECMAScript 3.1 and ECMAScript 4 teams agreed on a compromise: the two editions would be worked on, in parallel, with coordination between the teams to ensure that ECMAScript 3.1 remains a strict subset of ECMAScript 4 in both semantics and syntax. However, the differing philosophies in each team resulted in repeated breakages of the subset rule, and it remained doubtful that the ECMAScript 4 dissenters would ever support or implement ECMAScript 4 in the future. After over a year since the disagreement over the future of ECMAScript within the Ecma Technical Committee 39, the two teams reached a new compromise in July 2008: Brendan Eich announced that Ecma TC39 would focus work on the ECMAScript 3.1 (later renamed to ECMAScript, 5th Edition) project with full collaboration of all parties, and vendors would target at least two interoperable implementations by early 2009. In April 2009, Ecma TC39 published the \"final\" draft of the 5th edition and announced that testing of interoperable implementations was expected to be completed by mid-July. On December 3, 2009, ECMA-262 5th edition was published. === 6th Edition – ECMAScript 2015 === The 6th edition, ECMAScript 6 (ES6) and later renamed to ECMAScript 2015, was finalized in June 2015. This update adds significant new syntax for writing complex applications, including class declarations (class Foo { ... } ), ES6 modules like import * as moduleName from \"...\"; export const Foo, but defines them semantically in the same terms as ECMAScript 5 strict mode. Other new features include iterators and for...of loops, Python-style generators, arrow function expression (() => {...} ), `let` keyword for local declarations, `const` keyword for constant local declarations, binary data, typed arrays, new collections (maps, sets and WeakMap), promises, number and math enhancements, reflection, proxies (metaprogramming for virtual objects and wrappers) and template literals for strings. The complete list is extensive. As the first \"ECMAScript Harmony\" specification, it is also known as \"ES6 Harmony.\" === 7th Edition – ECMAScript 2016 === The 7th edition, or ECMAScript 2016, was finalized in June 2016. Its features include block-scoping of variables and functions, destructuring patterns (of variables), proper tail calls, exponentiation operator `**` for numbers, `await`, `async` keywords for asynchronous programming (as a preparation for ES2017), and the function. The exponentiation operator is equivalent to , but provides a simpler syntax similar to languages like Python, F#, Perl, and Ruby. `async` / `await` was hailed as an easier way to use promises and develop asynchronous code. === 8th Edition – ECMAScript 2017 === The 8th edition, or ECMAScript 2017, was finalized in June 2017. Its features include the , and functions for easy manipulation of Objects, `async` / `await` constructions which use generators and promises, and additional features for concurrency and atomics. === 9th Edition – ECMAScript 2018 === The 9th edition, or ECMAScript 2018, was finalized in June 2018. New features include the spread operator and rest parameters (`...`) for object literals, asynchronous iteration, `Promise.prototype.finally` and additions to RegExp. The spread operator allows for the easy copying of object properties, as shown below. let object = {a: 1, b: 2} let objectClone = Object.assign({}, object) // before ES2018 let objectClone = {...object} // ES2018 syntax let otherObject = {c: 3, ...object} console.log(otherObject) // -> {c: 3, a: 1, b: 2} === 10th Edition – ECMAScript 2019 === The 10th edition, or ECMAScript 2019, was published in June 2019. Added features include, but are not limited to, `Array.prototype.flat`, `Array.prototype.flatMap`, changes to `Array.sort` and `Object.fromEntries`. is now guaranteed to be stable, meaning that elements with the same sorting precedence will appear in the same order in the sorted array. `Array.prototype.flat(depth=1)` flattens an array to a specified depth, meaning that all subarray elements (up to the specified depth) are concatenated recursively. === 11th Edition – ECMAScript 2020 === The 11th edition, or ECMAScript 2020, was published in June 2020. In addition to new functions, this version introduces a `BigInt` primitive type for arbitrary- sized integers, the nullish coalescing operator, and the globalThis object. BigInts are created either with the constructor or with the syntax , where \"n\" is placed after the number literal. BigInts allow the representation and manipulation of integers beyond , while Numbers are represented by a double- precision 64-bit IEEE 754 value. The built-in functions in are not compatible with BigInts; for example, exponentiation of BigInts must be done with the operator instead of . The nullish coalescing operator, , returns its right- hand side operand when its left-hand side is or . This contrasts with the operator, which would return for all \"falsy\" values, such as the ones below. undefined ?? \"string\" // -> \"string\" null ?? \"string\" // -> \"string\" false ?? \"string\" // -> false NaN ?? \"string\" // -> NaN Optional chaining makes it possible to access the nested properties of an object without having an AND check at each level. An example is . If any of the properties are not present, will be . === 12th Edition – ECMAScript 2021 === The 12th edition, or ECMAScript 2021, was published in June 2021. This version introduces the method for strings; , a promise combinator that short-circuits when an input value is fulfilled; , a new error type to represent multiple errors at once; logical assignment operators (, , `||=`); , for referring to a target object without preserving it from garbage collection, and , to manage registration and unregistration of cleanup operations performed when target objects are garbage collected; separators for numeric literals (); and was made more precise, reducing the amount of cases that result in an implementation-defined sort order. === ES.Next === ES.Next is a dynamic name that refers to whatever the next version is at the time of writing. ES.Next features include finished proposals (aka \"stage 4 proposals\") as listed at finished proposals that are not part of a ratified specification. The language committee follows a \"living spec\" model, so these changes are part of the standard, and ratification is a formality. == Features == The ECMAScript language includes structured, dynamic, functional, and prototype-based features. === Imperative and structured === ECMAScript JavaScript supports C style structured programming. Previously, JavaScript only supported function scoping using the keyword `var`, but ECMAScript 2015 added the keywords `let` and `const` allowing JavaScript to support both block scoping and function scoping. JavaScript supports automatic semicolon insertion, meaning that semicolons that are normally used to terminate a statement in C may be omitted in JavaScript. Like C-style languages, control flow is done with the , , / , / , and statements. Functions are weakly typed and may accept and return any type. Arguments not provided default to . === Weakly typed === ECMAScript is weakly typed. This means that certain types are assigned implicitly based on the operation being performed. However, there are several quirks in JavaScript's implementation of the conversion of a variable from one type to another. These quirks have been the subject of a talk entitled Wat. === Dynamic === ECMAScript is dynamically typed. Thus, a type is associated with a value rather than an expression. ECMAScript supports various ways to test the type of objects, including duck typing. === Transpiling === Since ES 2015, transpiling JavaScript has become very common. Transpilation is a source-to-source compilation in which newer versions of JavaScript are used, and a transpiler rewrites the source code so that it is supported by older browsers. Usually, transpilers transpile down to ES3 to maintain compatibility with all versions of browsers. The settings to transpiling to a specific version can be configured according to need. Transpiling adds an extra step to the build process and is sometimes done to avoid needing polyfills. Polyfills create new features for older environments that lack them. Polyfills do this at runtime in the interpreter, such as the user's browser or on the server. Instead, transpiling rewrites the ECMA code itself during the build phase of development before it reaches the interpreter. == Conformance == In 2010, Ecma International started developing a standards test for Ecma 262 ECMAScript. Test262 is an ECMAScript conformance test suite that can be used to check how closely a JavaScript implementation follows the ECMAScript Specification. The test suite contains thousands of individual tests, each of which tests some specific requirement(s) of the ECMAScript specification. The development of Test262 is a project of the Ecma Technical Committee 39 (TC39). The testing framework and individual tests are created by member organizations of TC39 and contributed to Ecma for use in Test262. Important contributions were made by Google (Sputnik testsuite) and Microsoft who both contributed thousands of tests. The Test262 testsuite consisted of tests . ECMAScript specifications through ES7 are well-supported in major web browsers. The table below shows the conformance rate for current versions of software with respect to the most recent editions of ECMAScript. {| class=\"wikitable sortable\" |+Scripting engine conformance |- style=\"background:#ccf;\" ! scope=\"col\" rowspan=\"2\" | Scripting engine ! scope=\"col\" rowspan=\"2\" | Reference application(s) ! scope=\"col\" colspan=\"4\" | ConformanceES5 is the baseline for this test suite. The conformance rate for other editions reflects support for new features only, not a comprehensive score. |- !scope=\"col\" | ES5 !scope=\"col\" | ES6 (2015) !scope=\"col\" | ES7 (2016) !scope=\"col\" | Newer (2017+)Composite score that includes new features from ES7 through next edition drafts |- !scope=\"row\" | SpiderMonkey | Firefox 94 | 100% || 98% || 100% || 100% |- !scope=\"row\" | V8 | Google Chrome 95, Microsoft Edge 95, Opera 80 | 100% || 98% || 100% || 100% |- !scope=\"row\" | JavaScriptCore | Safari 15 | 100% || 99% || 100% || 90% |} == See also == * Comparison of JavaScript engines * ECMAScript for XML (E4X) * JavaScript * JScript * List of ECMAScript engines == References == == External links == ===ISO standards=== *ISO 16262 ===ECMA standards=== *ECMA-262 ECMAScript Language Specification **3rd Edition, December 1999: PDF **Edition 3 Final, March 2000: PDF **4th Edition (overview): PDF **4th Edition (final draft): HTML, PDF **5th Edition, December 2009: PDF **5.1 Edition, June 2011: HTML, PDF **6th Edition, June 2015 (ECMAScript 2015 Language Specification): HTML, PDF **7th Edition, June 2016 (ECMAScript 2016 Language Specification): HTML, PDF **8th edition, June 2017 (ECMAScript 2017 Language Specification): HTML, PDF **9th edition, June 2018 (ECMAScript 2018 Language Specification): HTML,PDF **10th edition, June 2019 (ECMAScript 2019 Language Specification): HTML,PDF **11th edition, June 2020 (ECMAScript 2020 Language Specification): HTML,PDF **12th edition, June 2021 (ECMAScript 2021 Language Specification): HTML,PDF *ECMA-290 ECMAScript Components Specification (June 1999) *ECMA-327 ECMAScript 3rd Edition Compact Profile (June 2001) *ECMA-357 ECMAScript for XML (E4X) Specification (June 2004) Category:Computer-related introductions in 1997 Category:C programming language family Category:Computer standards Category:Dynamically typed programming languages Category:Ecma standards Category:JavaScript dialect engines Category:JavaScript programming language family Category:Object-based programming languages Category:Programming languages with an ISO standard Category:Prototype-based programming languages Category:Scripting languages Category:Source-to-source compilers",
 "title": "ECMAScript"
}